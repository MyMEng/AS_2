-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [70] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[
AES tables               taken from: http://anh.cs.luc.edu/331/code/aes.py
Multiplication algorithm taken from: http://en.wikipedia.org/wiki/Finite_field_arithmetic#Multiplication
]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[X] Stage 1 : an attack based on error messages

              - Successfully reversed RSADP    primitive             ( 50%)
              - Successfully reversed EME-OAEP primitive             ( 50%)

                Attack result : [
                37260000441853B0A1FBF596F637021013D780165FCDF6194476387EAEEF512012753A68A4AF92AD36421C87D9D09628EE41
                ]

[X] Stage 2 : an attack based on execution time

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [
                1B7FEAABD5977A61
                ]

[X] Stage 3 : an attack based on an injected fault

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [
                D18862ED924FF94111BF0F0917F35127
                ]

[X] Stage 4 : an attack based on power consumption

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [
                A2718D0D42F504931BB1FFC7287B07F5
                ]

[X] Stage 5 : analysis                                               (100%)

                                                                     ------
                                                                     (500%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[
* Multi processing was used in Python to decrease computation time
* In fault attack after key recovery using 2 systems of equations quick check is
  made by producing second faulty cipher-text.
]

--------------------------------------------------------------------