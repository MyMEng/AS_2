Stage 1:

Q.1.1 Consider an example where N = 551, e = 5, d = 101 and c = 243.  Using
      your own words, briefly explain and illustrate the working principle
      of this attack (i.e., how and why it works).

* By calculating /B/ corresponding to this parameter and based on this number restrict the number of plain-texts corresponding to our cipher-text by number of oracle queries leading to only one plain-text left.
The message here is /m/ = 3.

Q.1.2 To prevent the attack, the vendor suggests altering the software: the
      idea is that no matter what error occurs, the same error code will be
      produced.  Explain whether (and why, or why not) this change alone is
      sufficient.

* If all the other algorithm steps follow RSA Cryptography Standards guideline this change should be sufficient. If this change is made the chosen-cypher-text attack is of no use anymore as the error message is non-informative. If no information can be learnt about encoded message the cipher should not be broken.

Q.1.7 Side-channel attacks are often categorised as being either simple or
      differential: how would categorise this attack, and why?

* I would categorise this attack as a /simple/ one. It does not simulate the device to estimate some parameter and compare it with real execution measurements by some distinguisher function therefore is not differential. On, contrary it exploits a fault made by programmer to gather information needed to recover secret key.


Stage 2:

Q.2.1 The vendor of this attack target is concerned that news of this attack
      could scare off potential customers; they will make any alteration
      necessary (in software or hardware) to prevent the attack.  Explain
      the options they have, and which one you would recommend.

* Blinding RSA with some random value /r/ leads to corresponding timings being uncorrelated to the operations being performed. Precisely, before encryption the message is randomised in reversible manner therefore leading to simulation not corresponding to measures.
* Always performing reduction, whether it is needed or not can lead to non-informative time traces, therefore preventing timing attack.

Q.2.2 Assuming a Montgomery multiplication takes n (simulated) clock cycles
      on the attack target, estimate the value of n (as accurately as you
      can) and explain how you did so.

* Assuming CIOS Montgomery multiplication we can take /2s^2 + s/ multiplications and /4s^2 + 4s + 2/ additions[1]. Assuming 64-bit Core2Duo we can take 1 cycle addition and 3 cycle multiplication[2]. Finally, assuming that we are working with 1024-bits.
n = 1*(4s^2 + 4s + 2) + 3*(2s^2 + s) = 10s^2 + 5s + 2 = |for s:=16| = 2642 cycles

[1] http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=502403
[2] http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf

Q.2.8 The level of noise, n, within measurements of execution time will
      influence the number of measurements, m, required for a successful
      attack.  Explain what the relationship between n and m is (i.e., how
      you expect m to grow as n grows).

* Assuming the average time is taken to be our distinguisher, the increased noise affects the average significantly, therefore leading to increased number of samples /m/ needed. Possibly, it is polynomial or exponential growth.

Stage 3:

Q.3.1 Imagine that instead of influencing data (i.e., the state matrix), a
      fault can influence control-flow (e.g., conditional statements, loop
      structure) somehow during execution.  Stating any assumptions you
      make, give an alternative attack strategy based on this ability.

* If we are able to alter the execution of the encryption we could force the algorithm to reduce the number of encryption rounds(or even jump all of them) therefore making key recovery trivial.

Q.3.2 The question does not specify how faults are induced.  For the given
      attack target and context, explain one viable approach.

* One approach to introduce fault could be to use a glitch on the power supply to the core of the chip(like ARM7TDMI). 

Q.3.3 For side-channel attacks, the number of acquisitions required can be
      used as a measure of efficiency.  Outline the equivalent measure for
      fault attacks, and explain whether (and why) you think a side-channel
      attack on AES could be as efficient as a fault attack based on these
      measures.

* Here the reasonable measure could be number of interactions with the devise as introducing the fault at particular moment is hard, expensive and practically hard to repeat. side-channel attack based on this measure would be highly inefficient as these kind of attack usually need a lot of samples.

Stage 4:

Q.4.1 As a security consultant, you have been working on a prototype of the
      attack target; before the product is deployed, the vendor is willing
      to make any alteration necessary (in software or hardware) to prevent
      the attack.  Explain the options available, and which one you would
      recommend.

* Masking manipulated data with random value.
* Perform additional, not related to encryption/decryption operations, which make power consumption less stage dependent and more balanced.
* Hardware implementation of the device so that power consumption is constant no matter what operations(can be idle operations) are performed.

Q.4.2 Your implementation of this attack will target some operation during
      execution of AES.  Identify which operation you target, and explain
      why.  Outline other operation(s) you could have targeted, and why they
      might be a better or worse choice.

* The target was SubBytes operation; it is function of both plain-text and key; its power traces also are highly dependent on values of key bytes.
* The other approach could be to target 10th round AddRoundKey operation as it is dependent on both cypher text and 10th round sub-key. The extra effort is needed here to transform 10th round sub-key to the key.

Q.4.3 Suppose the attack target executes AES in CBC mode rather than ECB.
      How would you alter your attack strategy to cope with this change?

* We treat /the key/ to be recovered as a function of the underlying key and unknown constant. After recovering number of /keys/, we combine them with known variable inputs to arrive at intermediate values used in encryption, which in turn are used to facilitate the attack in the next round. The attack would be extended to multiple(possibly 4) stages(AES rounds). 
